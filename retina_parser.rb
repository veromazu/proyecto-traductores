#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'


require_relative "retina_lexer"

require_relative 'retina_ast'

class SyntacticError < RuntimeError

    def initialize(tok)
        @token = tok
    end

    def to_s
        if @token.eql? "$" then
            "Unexpected EOF"
        else
           " LÃ­nea #{@token.position[0]}, Column #{@token.position[1]}: token inesperado : #{@token.symbol} : #{@token.id}"
        end
    end
end

class Parser < Racc::Parser

module_eval(<<'...end retina_parser.y/module_eval...', 'retina_parser.y', 231)


def on_error(id, token, stack)
    raise SyntacticError::new(token)
end

def initialize(lexer)
  @lexer=lexer
end

def next_token
    if ((token = @lexer.next_token)!=nil)
        return [token.symbol,token]
    else 
        return nil
    end

end


def parse(lexer)
	@yydebug = true
	@lexer = lexer
	@tokens = []
	do_parse
	
end
...end retina_parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    60,    61,    62,    63,    37,   142,    33,    44,    45,    34,
    68,   -12,    67,    35,    36,    37,    76,    33,    43,    75,
    34,    37,   151,    33,    35,    36,    34,   152,   131,   128,
    35,    36,    44,    45,    74,    69,    73,    72,    71,    70,
    62,    63,    66,    65,    64,    96,   125,   -12,    10,   135,
    15,    55,    75,    95,    37,   123,    33,    44,    45,    34,
   133,    15,    55,    35,    36,    62,    63,    15,    55,    37,
   119,    33,    44,    45,    34,    94,    44,    45,    35,    36,
    66,    65,    64,    95,    44,    45,    14,    13,    31,   134,
    76,    28,    29,    30,    93,    21,    22,    23,    10,    37,
    49,    33,    18,    88,    34,    66,    65,    64,    35,    36,
    87,   141,   130,   143,    86,    15,    14,    13,    31,    10,
    85,    28,    29,    30,   148,    21,    22,    23,    37,    10,
    33,   150,    18,    34,    37,    58,    33,    35,    36,    34,
   116,   153,    10,    35,    36,    15,    40,   156,   131,    37,
   157,    33,    39,   159,    34,    37,   160,    33,    35,    36,
    34,     5,    11,    10,    35,    36,    14,    13,    31,   165,
   166,    28,    29,    30,    49,    21,    22,    23,   167,    37,
    49,    33,    18,     5,    34,   169,   170,     7,    35,    36,
     6,   172,   173,   nil,    37,    15,    33,   nil,   nil,    34,
    37,    15,    33,    35,    36,    34,   nil,   nil,   nil,    35,
    36,    14,    13,    31,   nil,   nil,    28,    29,    30,   nil,
    21,    22,    23,   nil,    37,    49,    33,    18,   nil,    34,
   nil,   nil,   nil,    35,    36,   nil,   nil,   nil,   nil,    37,
    15,    33,   nil,   nil,    34,    37,    49,    33,    35,    36,
    34,    37,   nil,    33,    35,    36,    34,   nil,   nil,   nil,
    35,    36,    14,    13,    31,   nil,   nil,    28,    29,    30,
    49,    21,    22,    23,    37,   nil,    33,   nil,    18,    34,
   nil,   nil,   nil,    35,    36,    49,   nil,   nil,   nil,   nil,
    37,    15,    33,   nil,   nil,    34,   nil,    49,   nil,    35,
    36,   nil,   nil,   nil,    37,   nil,    33,   nil,   nil,    34,
   nil,   nil,   nil,    35,    36,   nil,   nil,   nil,   nil,   nil,
    49,    14,    13,    31,   nil,   nil,    28,    29,    30,   nil,
    21,    22,    23,    37,   nil,    33,    49,    18,    34,    37,
   nil,    33,    35,    36,    34,   nil,   nil,   nil,    35,    36,
    15,    37,   nil,    33,   nil,   nil,    34,    37,   nil,    33,
    35,    36,    34,    37,   nil,    33,    35,    36,    34,   nil,
   nil,   nil,    35,    36,   nil,   nil,   nil,   nil,    37,    49,
    33,   nil,   nil,    34,    37,    49,    33,    35,    36,    34,
    37,   nil,    33,    35,    36,    34,   nil,    49,   nil,    35,
    36,   nil,   nil,    49,   nil,   nil,   nil,   nil,   nil,    49,
   nil,   nil,   nil,   nil,   nil,   nil,    37,   nil,    33,   nil,
   nil,    34,   nil,   nil,    49,    35,    36,   nil,   nil,   nil,
    49,   nil,   nil,    14,    13,    31,    49,   nil,    28,    29,
    30,   nil,    21,    22,    23,   nil,    37,   nil,    33,    18,
   nil,    34,   nil,   nil,   nil,    35,    36,   nil,   nil,   nil,
   nil,   nil,    15,    14,    13,    31,   nil,   nil,    28,    29,
    30,   nil,    21,    22,    23,    37,   nil,    33,   nil,    18,
    34,    37,   nil,    33,    35,    36,    34,   nil,   nil,   nil,
    35,    36,    15,   nil,   nil,   nil,    37,   nil,    33,   nil,
   nil,    34,    37,   nil,    33,    35,    36,    34,   nil,   nil,
   nil,    35,    36,    14,    13,    31,   nil,   nil,    28,    29,
    30,    49,    21,    22,    23,   nil,    37,    49,    33,    18,
   nil,    34,   nil,   nil,   nil,    35,    36,   nil,   nil,   nil,
   nil,    37,    15,    33,   nil,   nil,    34,    37,    49,    33,
    35,    36,    34,   nil,   nil,   nil,    35,    36,    14,    13,
    31,   nil,   nil,    28,    29,    30,   nil,    21,    22,    23,
   nil,    37,    49,    33,    18,   nil,    34,   nil,   nil,   nil,
    35,    36,   nil,   nil,   nil,   nil,    37,    15,    33,   nil,
   nil,    34,    37,    49,    33,    35,    36,    34,   nil,   nil,
   nil,    35,    36,   nil,   nil,   nil,    60,    61,    62,    63,
   nil,   nil,   nil,   nil,   nil,   nil,    68,    49,    67,    60,
    61,    62,    63,   nil,   nil,   nil,   nil,   nil,   nil,    68,
   nil,    67,    49,    60,    61,    62,    63,   nil,    49,   nil,
    74,    69,    73,    72,    71,    70,   nil,    59,    66,    65,
    64,   nil,   nil,    74,    69,    73,    72,    71,    70,   nil,
   nil,    66,    65,    64,   nil,   nil,   nil,   -79,   -79,   -79,
   -79,   -79,   -79,   nil,   nil,    66,    65,    64,    60,    61,
    62,    63,   nil,   nil,   nil,   nil,   nil,   nil,    68,   nil,
    67,    60,    61,    62,    63,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    60,    61,
    62,    63,    74,    69,    73,    72,    71,    70,    68,    92,
    66,    65,    64,   nil,   nil,    74,    69,    73,    72,    71,
    70,   nil,   nil,    66,    65,    64,   nil,   nil,   nil,   nil,
   nil,   nil,    74,    69,    73,    72,    71,    70,   nil,   nil,
    66,    65,    64,    60,    61,    62,    63,   nil,   nil,   nil,
   nil,   nil,   nil,    68,   nil,    67,    60,    61,    62,    63,
   nil,   nil,   nil,   nil,   nil,   nil,    68,   nil,    67,   nil,
   nil,   nil,   149,    60,    61,    62,    63,    74,    69,    73,
    72,    71,    70,   nil,   nil,    66,    65,    64,   nil,   nil,
    74,    69,    73,    72,    71,    70,   nil,   nil,    66,    65,
    64,    60,    61,    62,    63,   nil,   nil,   -79,   -79,   -79,
   -79,   -79,   -79,   nil,   nil,    66,    65,    64,    60,    61,
    62,    63,   nil,   nil,   nil,   nil,   nil,   nil,    68,   nil,
    67,    60,    61,    62,    63,   -79,   -79,   -79,   -79,   -79,
   -79,   nil,   nil,    66,    65,    64,   nil,   nil,   164,   nil,
   nil,   nil,    74,    69,    73,    72,    71,    70,   nil,   nil,
    66,    65,    64,   nil,   nil,   -79,   -79,   -79,   -79,   -79,
   -79,   nil,   nil,    66,    65,    64,    60,    61,    62,    63,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    60,    61,    62,
    63,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   -79,   -79,   -79,   -79,   -79,   -79,   nil,   nil,    66,    65,
    64,   -79,   -79,   -79,   -79,   -79,   -79,   nil,   nil,    66,
    65,    64,    60,    61,    62,    63,   nil,   nil,   nil,   nil,
   nil,   nil,    68,   nil,    67,    60,    61,    62,    63,   118,
   nil,   nil,   nil,   nil,   nil,    68,   nil,    67,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    74,    69,    73,    72,
    71,    70,   nil,   nil,    66,    65,    64,   nil,   nil,    74,
    69,    73,    72,    71,    70,   nil,   nil,    66,    65,    64,
    60,    61,    62,    63,   nil,   nil,   nil,   nil,   nil,   nil,
    68,   nil,    67,    60,    61,    62,    63,   nil,   122,   nil,
   nil,   nil,   nil,    68,   120,    67,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    74,    69,    73,    72,    71,    70,
   nil,   nil,    66,    65,    64,   nil,   nil,    74,    69,    73,
    72,    71,    70,   nil,   nil,    66,    65,    64,    60,    61,
    62,    63,   nil,   nil,   nil,   nil,   nil,   nil,    68,   nil,
    67,   nil,   nil,   nil,   nil,   nil,   nil,   121,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    74,    69,    73,    72,    71,    70,   nil,   nil,
    66,    65,    64 ]

racc_action_check = [
   117,   117,   117,   117,    23,   124,    23,    14,    14,    23,
   117,    15,   117,    23,    23,    95,    27,    95,    14,    91,
    95,    22,   139,    22,    95,    95,    22,   139,    91,    88,
    22,    22,    39,    39,   117,   117,   117,   117,   117,   117,
    98,    98,   117,   117,   117,    57,    86,    15,    84,   117,
    23,    23,    27,    57,    28,    83,    28,   141,   141,    28,
   112,    95,    95,    28,    28,    97,    97,    22,    22,   153,
    78,   153,    89,    89,   153,    51,   130,   130,   153,   153,
    98,    98,    98,    51,   142,   142,   153,   153,   153,   115,
    56,   153,   153,   153,    50,   153,   153,   153,    46,   152,
    28,   152,   153,    43,   152,    97,    97,    97,   152,   152,
    42,   123,    90,   126,    41,   153,   152,   152,   152,   131,
    40,   152,   152,   152,   136,   152,   152,   152,   149,    29,
   149,   138,   152,   149,    76,    25,    76,   149,   149,    76,
    76,   140,    21,    76,    76,   152,    12,   143,   145,    13,
   148,    13,     9,   150,    13,    75,   151,    75,    13,    13,
    75,     0,     6,     5,    75,    75,    13,    13,    13,   161,
   162,    13,    13,    13,   149,    13,    13,    13,   163,    74,
    76,    74,    13,     4,    74,   165,   166,     3,    74,    74,
     1,   171,   172,   nil,    16,    13,    16,   nil,   nil,    16,
    18,    75,    18,    16,    16,    18,   nil,   nil,   nil,    18,
    18,    16,    16,    16,   nil,   nil,    16,    16,    16,   nil,
    16,    16,    16,   nil,    73,    74,    73,    16,   nil,    73,
   nil,   nil,   nil,    73,    73,   nil,   nil,   nil,   nil,   164,
    16,   164,   nil,   nil,   164,   167,    18,   167,   164,   164,
   167,    72,   nil,    72,   167,   167,    72,   nil,   nil,   nil,
    72,    72,   167,   167,   167,   nil,   nil,   167,   167,   167,
    73,   167,   167,   167,    71,   nil,    71,   nil,   167,    71,
   nil,   nil,   nil,    71,    71,   164,   nil,   nil,   nil,   nil,
    70,   167,    70,   nil,   nil,    70,   nil,    72,   nil,    70,
    70,   nil,   nil,   nil,    87,   nil,    87,   nil,   nil,    87,
   nil,   nil,   nil,    87,    87,   nil,   nil,   nil,   nil,   nil,
    71,    87,    87,    87,   nil,   nil,    87,    87,    87,   nil,
    87,    87,    87,    69,   nil,    69,    70,    87,    69,    30,
   nil,    30,    69,    69,    30,   nil,   nil,   nil,    30,    30,
    87,    31,   nil,    31,   nil,   nil,    31,    33,   nil,    33,
    31,    31,    33,    34,   nil,    34,    33,    33,    34,   nil,
   nil,   nil,    34,    34,   nil,   nil,   nil,   nil,    68,    69,
    68,   nil,   nil,    68,   135,    30,   135,    68,    68,   135,
    67,   nil,    67,   135,   135,    67,   nil,    31,   nil,    67,
    67,   nil,   nil,    33,   nil,   nil,   nil,   nil,   nil,    34,
   nil,   nil,   nil,   nil,   nil,   nil,   121,   nil,   121,   nil,
   nil,   121,   nil,   nil,    68,   121,   121,   nil,   nil,   nil,
   135,   nil,   nil,   121,   121,   121,    67,   nil,   121,   121,
   121,   nil,   121,   121,   121,   nil,   120,   nil,   120,   121,
   nil,   120,   nil,   nil,   nil,   120,   120,   nil,   nil,   nil,
   nil,   nil,   121,   120,   120,   120,   nil,   nil,   120,   120,
   120,   nil,   120,   120,   120,   119,   nil,   119,   nil,   120,
   119,    66,   nil,    66,   119,   119,    66,   nil,   nil,   nil,
    66,    66,   120,   nil,   nil,   nil,   118,   nil,   118,   nil,
   nil,   118,    65,   nil,    65,   118,   118,    65,   nil,   nil,
   nil,    65,    65,   118,   118,   118,   nil,   nil,   118,   118,
   118,   119,   118,   118,   118,   nil,    64,    66,    64,   118,
   nil,    64,   nil,   nil,   nil,    64,    64,   nil,   nil,   nil,
   nil,     7,   118,     7,   nil,   nil,     7,    63,    65,    63,
     7,     7,    63,   nil,   nil,   nil,    63,    63,     7,     7,
     7,   nil,   nil,     7,     7,     7,   nil,     7,     7,     7,
   nil,    60,    64,    60,     7,   nil,    60,   nil,   nil,   nil,
    60,    60,   nil,   nil,   nil,   nil,    61,     7,    61,   nil,
   nil,    61,    62,    63,    62,    61,    61,    62,   nil,   nil,
   nil,    62,    62,   nil,   nil,   nil,    26,    26,    26,    26,
   nil,   nil,   nil,   nil,   nil,   nil,    26,    60,    26,    52,
    52,    52,    52,   nil,   nil,   nil,   nil,   nil,   nil,    52,
   nil,    52,    61,   106,   106,   106,   106,   nil,    62,   nil,
    26,    26,    26,    26,    26,    26,   nil,    26,    26,    26,
    26,   nil,   nil,    52,    52,    52,    52,    52,    52,   nil,
   nil,    52,    52,    52,   nil,   nil,   nil,   106,   106,   106,
   106,   106,   106,   nil,   nil,   106,   106,   106,    48,    48,
    48,    48,   nil,   nil,   nil,   nil,   nil,   nil,    48,   nil,
    48,   105,   105,   105,   105,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   104,   104,
   104,   104,    48,    48,    48,    48,    48,    48,   104,    48,
    48,    48,    48,   nil,   nil,   105,   105,   105,   105,   105,
   105,   nil,   nil,   105,   105,   105,   nil,   nil,   nil,   nil,
   nil,   nil,   104,   104,   104,   104,   104,   104,   nil,   nil,
   104,   104,   104,   137,   137,   137,   137,   nil,   nil,   nil,
   nil,   nil,   nil,   137,   nil,   137,   168,   168,   168,   168,
   nil,   nil,   nil,   nil,   nil,   nil,   168,   nil,   168,   nil,
   nil,   nil,   137,   107,   107,   107,   107,   137,   137,   137,
   137,   137,   137,   nil,   nil,   137,   137,   137,   nil,   nil,
   168,   168,   168,   168,   168,   168,   nil,   nil,   168,   168,
   168,   108,   108,   108,   108,   nil,   nil,   107,   107,   107,
   107,   107,   107,   nil,   nil,   107,   107,   107,   158,   158,
   158,   158,   nil,   nil,   nil,   nil,   nil,   nil,   158,   nil,
   158,   109,   109,   109,   109,   108,   108,   108,   108,   108,
   108,   nil,   nil,   108,   108,   108,   nil,   nil,   158,   nil,
   nil,   nil,   158,   158,   158,   158,   158,   158,   nil,   nil,
   158,   158,   158,   nil,   nil,   109,   109,   109,   109,   109,
   109,   nil,   nil,   109,   109,   109,   110,   110,   110,   110,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   111,   111,   111,
   111,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   110,   110,   110,   110,   110,   110,   nil,   nil,   110,   110,
   110,   111,   111,   111,   111,   111,   111,   nil,   nil,   111,
   111,   111,    77,    77,    77,    77,   nil,   nil,   nil,   nil,
   nil,   nil,    77,   nil,    77,   113,   113,   113,   113,    77,
   nil,   nil,   nil,   nil,   nil,   113,   nil,   113,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    77,    77,    77,    77,
    77,    77,   nil,   nil,    77,    77,    77,   nil,   nil,   113,
   113,   113,   113,   113,   113,   nil,   nil,   113,   113,   113,
    79,    79,    79,    79,   nil,   nil,   nil,   nil,   nil,   nil,
    79,   nil,    79,    82,    82,    82,    82,   nil,    82,   nil,
   nil,   nil,   nil,    82,    79,    82,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    79,    79,    79,    79,    79,    79,
   nil,   nil,    79,    79,    79,   nil,   nil,    82,    82,    82,
    82,    82,    82,   nil,   nil,    82,    82,    82,    80,    80,
    80,    80,   nil,   nil,   nil,   nil,   nil,   nil,    80,   nil,
    80,   nil,   nil,   nil,   nil,   nil,   nil,    80,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    80,    80,    80,    80,    80,    80,   nil,   nil,
    80,    80,    80 ]

racc_action_pointer = [
   127,   190,   nil,   171,   149,   115,   162,   539,   nil,   145,
   nil,   nil,   128,   147,    -2,     4,   192,   nil,   198,   nil,
   nil,    94,    19,     2,   nil,    91,   603,     9,    52,    81,
   337,   349,   nil,   355,   361,   nil,   nil,   nil,   nil,    23,
    76,    96,    90,    85,   nil,   nil,    50,   nil,   675,   nil,
    50,    31,   616,   nil,   nil,   nil,    83,     1,   nil,   nil,
   569,   584,   590,   545,   524,   500,   479,   388,   376,   331,
   288,   272,   249,   222,   177,   153,   132,   939,    39,   997,
  1055,   nil,  1010,    47,     0,   nil,     2,   302,   -15,    63,
    68,   -24,   nil,   nil,   nil,    13,   nil,    60,    35,   nil,
   nil,   nil,   nil,   nil,   705,   688,   630,   780,   808,   838,
   883,   894,    16,   952,   nil,    81,   nil,    -3,   494,   473,
   444,   414,   nil,    75,   -47,   nil,    95,   nil,   nil,   nil,
    67,    71,   nil,   nil,   nil,   382,   106,   750,   113,     4,
   124,    48,    75,   103,   nil,    96,   nil,   nil,   106,   126,
   109,   112,    97,    67,   nil,   nil,   nil,   nil,   825,   nil,
   nil,   151,   152,   158,   237,   141,   142,   243,   763,   nil,
   nil,   173,   148,   nil ]

racc_action_default = [
    -3,   -79,    -1,   -79,    -3,   -79,   -79,   -79,    -4,   -79,
   -12,   174,   -79,   -79,   -79,   -77,   -25,   -27,   -79,   -29,
   -30,   -79,   -79,   -79,   -34,   -79,   -79,   -79,   -79,   -79,
   -79,   -79,   -56,   -79,   -79,   -74,   -75,   -76,   -78,    -9,
   -79,   -79,   -79,   -79,   -13,   -14,   -79,   -26,   -79,   -77,
   -79,   -79,   -37,   -38,   -39,   -41,   -79,   -79,   -35,   -36,
   -79,   -79,   -79,   -79,   -79,   -79,   -79,   -79,   -79,   -79,
   -79,   -79,   -79,   -79,   -79,   -79,   -79,   -79,   -79,   -79,
   -79,   -64,   -79,   -79,   -79,    -2,   -79,   -23,   -79,   -15,
   -79,   -19,   -28,   -31,   -32,   -79,   -33,   -57,   -58,   -59,
   -60,   -61,   -62,   -63,   -66,   -67,   -68,   -69,   -70,   -71,
   -72,   -73,   -79,   -43,   -44,   -79,   -53,   -54,   -79,   -79,
   -79,   -79,   -65,   -21,   -10,    -6,   -79,   -24,    -8,   -16,
   -17,   -79,   -40,   -42,   -52,   -79,   -79,   -79,   -79,   -79,
   -79,   -79,    -9,   -79,   -18,   -19,   -20,   -55,   -79,   -79,
   -79,   -79,   -79,   -23,   -22,   -11,    -7,   -45,   -48,   -47,
   -50,   -79,   -79,   -79,   -79,   -79,   -79,   -79,   -49,   -51,
    -5,   -79,   -79,   -46 ]

racc_goto_table = [
    12,    42,    83,    48,   126,    84,    41,    52,    52,    47,
    90,    54,    54,    77,   115,    79,    80,     2,    81,    82,
    51,    57,     3,    89,   140,   112,     8,   163,     1,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   113,   117,   nil,   nil,   114,     9,   nil,   nil,   nil,   nil,
   162,   nil,   nil,   147,   nil,   nil,   129,   nil,   nil,   nil,
    52,    50,    56,    56,    54,   nil,   nil,   nil,   nil,    78,
   nil,   nil,   nil,   132,   nil,   146,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   137,   155,    91,   154,    84,   nil,
   nil,   136,   nil,   138,   139,   nil,   nil,   144,   nil,   nil,
   117,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   158,    56,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   124,   161,   nil,   nil,   nil,   168,
   nil,   nil,   nil,   nil,   nil,    56,   nil,   nil,   nil,   nil,
   171,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   145 ]

racc_goto_check = [
     4,    11,     7,    16,     9,    12,     4,    16,    16,     4,
    14,    20,    20,    16,    24,    16,    16,     2,    16,    16,
    18,    18,     3,    13,     8,    22,     3,    23,     1,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    16,    16,    16,    16,    16,
    16,    16,    16,    16,    16,    16,    16,    16,    16,    16,
    16,    16,   nil,   nil,    20,     6,   nil,   nil,   nil,   nil,
     9,   nil,   nil,    24,   nil,   nil,    11,   nil,   nil,   nil,
    16,     6,     6,     6,    20,   nil,   nil,   nil,   nil,     6,
   nil,   nil,   nil,    18,   nil,    14,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    16,     7,     6,    12,    12,   nil,
   nil,     4,   nil,     4,     4,   nil,   nil,    11,   nil,   nil,
    16,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    16,     6,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     6,     4,   nil,   nil,   nil,    16,
   nil,   nil,   nil,   nil,   nil,     6,   nil,   nil,   nil,   nil,
     4,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     6 ]

racc_goto_pointer = [
   nil,    28,    17,    22,    -7,   nil,    60,   -37,   -99,   -83,
   nil,   -13,   -34,   -23,   -36,   nil,   -15,   nil,    -2,   nil,
   -11,   nil,   -50,  -131,   -62,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   127,     4,    27,   nil,   nil,   nil,
    17,   nil,    46,    19,   nil,    16,    26,    20,   nil,    24,
    25,    53,   nil,   nil,   nil,    32,    38 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 55, :_reduce_1,
  5, 56, :_reduce_2,
  0, 57, :_reduce_none,
  2, 57, :_reduce_4,
  10, 59, :_reduce_5,
  4, 64, :_reduce_6,
  6, 64, :_reduce_7,
  4, 64, :_reduce_8,
  0, 61, :_reduce_none,
  2, 61, :_reduce_10,
  4, 61, :_reduce_11,
  1, 60, :_reduce_12,
  1, 66, :_reduce_13,
  1, 66, :_reduce_14,
  2, 65, :_reduce_15,
  3, 65, :_reduce_16,
  3, 65, :_reduce_17,
  4, 65, :_reduce_18,
  1, 68, :_reduce_19,
  3, 68, :_reduce_20,
  0, 62, :_reduce_none,
  2, 62, :_reduce_22,
  0, 63, :_reduce_none,
  1, 63, :_reduce_none,
  1, 58, :_reduce_25,
  2, 58, :_reduce_26,
  1, 69, :_reduce_27,
  3, 69, :_reduce_28,
  1, 69, :_reduce_29,
  1, 69, :_reduce_30,
  3, 69, :_reduce_31,
  3, 69, :_reduce_32,
  3, 69, :_reduce_33,
  1, 69, :_reduce_34,
  2, 69, :_reduce_35,
  2, 69, :_reduce_36,
  1, 72, :_reduce_37,
  1, 72, :_reduce_38,
  1, 72, :_reduce_39,
  3, 72, :_reduce_40,
  1, 75, :_reduce_41,
  4, 67, :_reduce_42,
  1, 76, :_reduce_43,
  1, 76, :_reduce_44,
  6, 71, :_reduce_45,
  11, 71, :_reduce_46,
  6, 71, :_reduce_47,
  0, 77, :_reduce_none,
  2, 77, :_reduce_49,
  6, 73, :_reduce_50,
  8, 73, :_reduce_51,
  4, 74, :_reduce_52,
  3, 74, :_reduce_53,
  1, 78, :_reduce_54,
  3, 78, :_reduce_55,
  1, 70, :_reduce_none,
  3, 70, :_reduce_57,
  3, 70, :_reduce_58,
  3, 70, :_reduce_59,
  3, 70, :_reduce_60,
  3, 70, :_reduce_61,
  3, 70, :_reduce_62,
  3, 70, :_reduce_63,
  2, 70, :_reduce_64,
  3, 70, :_reduce_65,
  3, 70, :_reduce_66,
  3, 70, :_reduce_67,
  3, 70, :_reduce_68,
  3, 70, :_reduce_69,
  3, 70, :_reduce_70,
  3, 70, :_reduce_71,
  3, 70, :_reduce_72,
  3, 70, :_reduce_73,
  1, 80, :_reduce_74,
  1, 80, :_reduce_75,
  1, 79, :_reduce_76,
  1, 79, :_reduce_77,
  1, 79, :_reduce_none ]

racc_reduce_n = 79

racc_shift_n = 174

racc_token_table = {
  false => 0,
  :error => 1,
  :DIGIT => 2,
  :PLUS => 3,
  :LESS => 4,
  :MULT => 5,
  :DIV2 => 6,
  :LPARENT => 7,
  :RPARENT => 8,
  :TYPEN => 9,
  :TYPEB => 10,
  :TRUE => 11,
  :FALSE => 12,
  :AND => 13,
  :NOT => 14,
  :OR => 15,
  :PROGRAM => 16,
  :BEGIN => 17,
  :END => 18,
  :WITH => 19,
  :DO => 20,
  :IF => 21,
  :THEN => 22,
  :ELSE => 23,
  :WHILE => 24,
  :FOR => 25,
  :REPEAT => 26,
  :TIMES => 27,
  :READ => 28,
  :WRITE => 29,
  :WRITELN => 30,
  :FROM => 31,
  :TO => 32,
  :BY => 33,
  :FUNC => 34,
  :RETURN => 35,
  :RETURN2 => 36,
  :EQUIVALENT => 37,
  :LESSTHAN => 38,
  :DISTINCT => 39,
  :GETHAN => 40,
  :LETHAN => 41,
  :GREATTHAN => 42,
  :EQUAL => 43,
  :SEMICOLON => 44,
  :MOD => 45,
  :DIV => 46,
  :MOD2 => 47,
  :ID => 48,
  :STRING => 49,
  :LCURLY => 50,
  :RCURLY => 51,
  :COLON => 52,
  :UMINUS => 53 }

racc_nt_base = 54

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "DIGIT",
  "PLUS",
  "LESS",
  "MULT",
  "DIV2",
  "LPARENT",
  "RPARENT",
  "TYPEN",
  "TYPEB",
  "TRUE",
  "FALSE",
  "AND",
  "NOT",
  "OR",
  "PROGRAM",
  "BEGIN",
  "END",
  "WITH",
  "DO",
  "IF",
  "THEN",
  "ELSE",
  "WHILE",
  "FOR",
  "REPEAT",
  "TIMES",
  "READ",
  "WRITE",
  "WRITELN",
  "FROM",
  "TO",
  "BY",
  "FUNC",
  "RETURN",
  "RETURN2",
  "EQUIVALENT",
  "LESSTHAN",
  "DISTINCT",
  "GETHAN",
  "LETHAN",
  "GREATTHAN",
  "EQUAL",
  "SEMICOLON",
  "MOD",
  "DIV",
  "MOD2",
  "ID",
  "STRING",
  "LCURLY",
  "RCURLY",
  "COLON",
  "UMINUS",
  "$start",
  "S",
  "Scope",
  "Listfunciones",
  "LInst",
  "funciones",
  "Var",
  "ListD",
  "Retorno",
  "funcInst",
  "wis",
  "Ldecl",
  "type",
  "Assign",
  "ListID",
  "Inst",
  "Expr",
  "Iterator",
  "writable",
  "Cond",
  "Call",
  "Str",
  "Asignable",
  "by",
  "ListParam",
  "Term",
  "Bool" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'retina_parser.y', 43)
  def _reduce_1(val, _values, result)
    result = S.new(val[0]);result.printAST(0)
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 48)
  def _reduce_2(val, _values, result)
    result = Scope.new(:Funciones,val[0],:Program,val[2])
    result
  end
.,.,

# reduce 3 omitted

module_eval(<<'.,.,', 'retina_parser.y', 53)
  def _reduce_4(val, _values, result)
    result=ListaFunc.new(:Funcion,val[0],val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 57)
  def _reduce_5(val, _values, result)
    result=Func.new(:Nombre_Funcion,val[1],:Parametros,val[3],:Tipo_Retorno,val[5],:Instrucciones,val[7])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 61)
  def _reduce_6(val, _values, result)
    result=Bloque.new(:declaraciones,nil,:instrucciones,val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 62)
  def _reduce_7(val, _values, result)
    result=Bloque.new(:declaraciones,val[1],:instrucciones,val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 63)
  def _reduce_8(val, _values, result)
    result=Bloque.new(:declaraciones,nil,:instrucciones,nil)
    result
  end
.,.,

# reduce 9 omitted

module_eval(<<'.,.,', 'retina_parser.y', 68)
  def _reduce_10(val, _values, result)
    result=ListD.new(:tipos,val[0],:identificadores,val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 69)
  def _reduce_11(val, _values, result)
    result=List.new(:tipos,val[0],val[3],:identificadores,val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 73)
  def _reduce_12(val, _values, result)
    result = Terms.new(:ID , val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 77)
  def _reduce_13(val, _values, result)
    result=Type.new(:Tipo,val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 78)
  def _reduce_14(val, _values, result)
    result=Type.new(:Tipo,val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 82)
  def _reduce_15(val, _values, result)
    result=Ldecl.new(:declaracion,:tipo,val[0],:asignacion,val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 83)
  def _reduce_16(val, _values, result)
    result=Ldecl.new(:declaracion,:tipo,val[0],:asignacion,val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 84)
  def _reduce_17(val, _values, result)
    result=Ldecl.new(:declaracion,:tipo,val[0],:Lista_ID,val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 85)
  def _reduce_18(val, _values, result)
    result=Ldecl.new(:Lista_Decl,:tipo,val[0],:Lista_ID,val[1],:declaracion,val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 89)
  def _reduce_19(val, _values, result)
    result=ListID.new(:ID,val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 90)
  def _reduce_20(val, _values, result)
    result=ListID.new(:ID,val[0],val[2])
    result
  end
.,.,

# reduce 21 omitted

module_eval(<<'.,.,', 'retina_parser.y', 95)
  def _reduce_22(val, _values, result)
    result=Retorno.new(:tipo,val[1])
    result
  end
.,.,

# reduce 23 omitted

# reduce 24 omitted

module_eval(<<'.,.,', 'retina_parser.y', 104)
  def _reduce_25(val, _values, result)
    result=ListaInst.new(:Instruccion,val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 105)
  def _reduce_26(val, _values, result)
    result=ListaInst.new(:Instruccion,val[0],val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 108)
  def _reduce_27(val, _values, result)
    result=Inst.new(:Bloque,val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 109)
  def _reduce_28(val, _values, result)
    result=Inst.new(:Retorno,val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 110)
  def _reduce_29(val, _values, result)
    result=Inst.new(:Asignacion,val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 111)
  def _reduce_30(val, _values, result)
    result=Inst.new(:Iteracion,val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 112)
  def _reduce_31(val, _values, result)
    result=Inst.new(:Lectura,val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 113)
  def _reduce_32(val, _values, result)
    result=Write.new(:Salida,val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 114)
  def _reduce_33(val, _values, result)
    result=Write.new(:Salida_Con_Salto,val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 115)
  def _reduce_34(val, _values, result)
    result=Inst.new(:Condicional,val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 116)
  def _reduce_35(val, _values, result)
    result=Inst.new(:Llamada_de_Funcion,val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 117)
  def _reduce_36(val, _values, result)
    result=Inst.new(:Expresion,val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 121)
  def _reduce_37(val, _values, result)
    result=Writable.new(:Expresion,val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 122)
  def _reduce_38(val, _values, result)
    result=Writable.new(:String,val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 123)
  def _reduce_39(val, _values, result)
    result=Writable.new(:Llamada_de_Funcion,val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 124)
  def _reduce_40(val, _values, result)
    result=Writable.new(:valor,val[0],:valor,val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 128)
  def _reduce_41(val, _values, result)
    result=Str.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 132)
  def _reduce_42(val, _values, result)
    result=Assign.new(:Lado_Izquierdo,val[0],:Lado_Derecho,val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 136)
  def _reduce_43(val, _values, result)
    result=Asignable.new(:Expresion,val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 137)
  def _reduce_44(val, _values, result)
    result=Asignable.new(:Llamada_de_Funcionf,val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 141)
  def _reduce_45(val, _values, result)
    result=WLoop.new(:Ciclo_While,:Condicion,val[1],:Do,val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 142)
  def _reduce_46(val, _values, result)
    result= FLoop.new(:Ciclo_For,:For,val[1],:From,val[3],:To,val[5],:By,nil,:Instrucciones,val[8])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 143)
  def _reduce_47(val, _values, result)
    result=RLoop.new(:Ciclo_Repeat,:Times,val[1],:Instrucciones,val[3])
    result
  end
.,.,

# reduce 48 omitted

module_eval(<<'.,.,', 'retina_parser.y', 148)
  def _reduce_49(val, _values, result)
    result=By.new(:By,val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 152)
  def _reduce_50(val, _values, result)
    result=Cond.new(:CondiciÃ³n,val[1],:Instrucciones,val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 153)
  def _reduce_51(val, _values, result)
    result=Cond.new(:Condicion,val[1],:Instrucciones,val[3],:Instrucciones_Else,val[5])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 157)
  def _reduce_52(val, _values, result)
    result=Call.new(:nombre,val[0],:argumentos,val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 158)
  def _reduce_53(val, _values, result)
    result=Call.new(:nombre,val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 162)
  def _reduce_54(val, _values, result)
    result=ListParam.new(:expresion,val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 163)
  def _reduce_55(val, _values, result)
    result=ListParam.new(:expresion,val[0],val[2])
    result
  end
.,.,

# reduce 56 omitted

module_eval(<<'.,.,', 'retina_parser.y', 173)
  def _reduce_57(val, _values, result)
    result = BinExp.new(:Suma, val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 174)
  def _reduce_58(val, _values, result)
    result = BinExp.new(:Resta, val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 175)
  def _reduce_59(val, _values, result)
    result = BinExp.new(:Multiplicacion, val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 176)
  def _reduce_60(val, _values, result)
    result = BinExp.new(:Division_Exacta, val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 177)
  def _reduce_61(val, _values, result)
    result = BinExp.new(:Resto_Exacto, val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 178)
  def _reduce_62(val, _values, result)
    result = BinExp.new(:Division_Entera, val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 179)
  def _reduce_63(val, _values, result)
    result = BinExp.new(:Resto_Entero, val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 180)
  def _reduce_64(val, _values, result)
    result = UnaExp.new(:Inverso_Aditivo , val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 181)
  def _reduce_65(val, _values, result)
    result = ParExp.new(:Expresion, val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 182)
  def _reduce_66(val, _values, result)
    result = BinExp.new(:Or , val[0],val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 183)
  def _reduce_67(val, _values, result)
    result = BinExp.new(:And, val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 184)
  def _reduce_68(val, _values, result)
    result = BinExp.new(:Menor_que, val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 185)
  def _reduce_69(val, _values, result)
    result = BinExp.new(:Mayor_que, val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 186)
  def _reduce_70(val, _values, result)
    result = BinExp.new(:Menor_O_Igual_Que, val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 187)
  def _reduce_71(val, _values, result)
    result = BinExp.new(:Mayor_O_Igual_Que, val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 188)
  def _reduce_72(val, _values, result)
    result = BinExp.new(:Distinto_Que, val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 189)
  def _reduce_73(val, _values, result)
    result = BinExp.new(:Equivalencia,val[0],val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 195)
  def _reduce_74(val, _values, result)
    result = Terms.new(:TRUE , val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 196)
  def _reduce_75(val, _values, result)
    result = Terms.new(:FALSE , val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 200)
  def _reduce_76(val, _values, result)
    result= Terms.new(:DIGIT,val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 201)
  def _reduce_77(val, _values, result)
    result = Terms.new(:ID , val[0])
    result
  end
.,.,

# reduce 78 omitted

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser
