#! /usr/local/bin/ruby
# encoding: utf-8

require_relative 'retina_parser'
require_relative 'retina_lexer'
require_relative 'manejadorSimbolos'
require_relative 'retina_ast'
=begin

UNIVERSIDAD SIMÓN BOLÍVAR
Traductores e Interpretadores
Fase 2 de Proyecto : Parser de Retina
Elaborado por:
	-Verónica Mazutiel, 13-10853
	-Melanie Gomes, 13-10544

=end

def main

	# Vemos que usuario ingrese el archivo
	if ARGV[0].nil?
		puts "Ingrese archivo."
		return
	end

	if ARGV[1] != nil
		puts "Argumento inválido #{ARGV[1]}"
		return
	end

	# Verificamos extension '.rtn' de archivo
	ARGV[0] =~ /\w+\.rtn/;
	if $&.nil? 
		puts "Extensión  inválida."
		return
	end

	# Verificar existencia del archivo
	if not File.file?(ARGV[0])
		puts "Archivo no encontrado."
		return
	end
	input = File::read(ARGV[0])
	# Create lexer
	lexer = Lexer.new()
	if lexer.identifier(input)
		parser=Parser.new(lexer)
		begin
			$ast = parser.parse(lexer)
			
		rescue => e
			SyntaxError.new(e)
			puts "Error sintactico: #{e}"
			abort
		end
		
		#Se intenta con el análisis de contexto
		begin
			analizador = Analizador.new($ast)
			analizador.program_Handler
		rescue => e
			SyntaxError.new(e)
			e.to_s
			abort
		end

		#Finalmente se ejecuta el programa
		begin
			$ast.interprete($tableStack)
		rescue =>e
			SyntaxError.new(e)
			e.to_s
			abort
		end

		# Creación de archivo de salida de la imagen de retina 
		File.open(ARGV[0][/\w+\./]+"pbm", 'w') do |f2|  
  			f2.puts "P1"
  			f2.puts "1001 1001"
  			for i in 0..1001
  				for j in 0..1001
  					f2.print $Pixels[i][j]
  					f2.print " "
  				end  
  				f2.puts
  			end
		end 
	else
		lexer.printErrors

	end
end


main